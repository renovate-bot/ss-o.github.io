<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Salvydas Lukosius</title><link>https://ss-o.github.io/posts/</link><description>Recent content in Posts on Salvydas Lukosius</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><atom:link href="https://ss-o.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>❮ ⚙️ ⬢ ZUI For Zsh Hackers ⬢ ❯</title><link>https://ss-o.github.io/posts/1/01/%EF%B8%8F-zui-for-zsh-hackers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ss-o.github.io/posts/1/01/%EF%B8%8F-zui-for-zsh-hackers/</guid><description>❮ ZI ❯ is a fast and feature-rich plugin manager for Zsh Unix shell.
⬢ ZUI is CGI+DHTML-like User Interface Library for Zsh / ZCurses
When both setup, I would say - quite a strong combo.
However, ❮ ZI ❯ has almost 100 repositories and some getting ready in China: https://gitee.com/z-shell/ it extends capabilities to no limit.
Is no limit not impressive? Well, then include almost all from here: https://github.</description><content type="html"><![CDATA[<!-- raw HTML omitted -->
<hr>
<!-- raw HTML omitted -->
<p>❮ <a href="https://z-shell.pages.dev/">ZI</a> ❯ <strong>is a fast and feature-rich plugin manager for <a href="https://zsh.sourceforge.io/">Zsh</a> <a href="https://en.wikipedia.org/wiki/Unix_shell">Unix</a> shell.</strong></p>
<p>⬢ <a href="https://github.com/z-shell/zui/">ZUI</a> is CGI+DHTML-like User Interface Library for Zsh / ZCurses</p>
<!-- raw HTML omitted -->
<p>When both setup, I would say - <strong>quite a strong combo</strong>.</p>
<p>However, ❮ <a href="https://z-shell.pages.dev/">ZI</a> ❯ has almost <a href="https://github.com/orgs/z-shell/repositories">100 repositories</a> and some getting ready in China: <a href="https://gitee.com/z-shell/">https://gitee.com/z-shell/</a> it extends capabilities to no limit.</p>
<p>Is no limit not impressive? Well, then include almost all from here: <a href="https://github.com/unixorn/awesome-zsh-plugins">https://github.com/unixorn/awesome-zsh-plugins</a> as most are compatible :)</p>
<blockquote>
<ul>
<li>Repositories: <a href="https://github.com/z-shell/zi/">ZI</a>, <a href="https://github.com/z-shell/zui/">ZUI</a>,</li>
<li>Issue report: <a href="https://github.com/z-shell/zui/issue">ZUI</a></li>
<li>Wiki + Open-Search: <a href="https://z.digitalclouds.dev/search">https://z.digitalclouds.dev/search</a></li>
</ul>
</blockquote>
<hr>
<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xsa26k4ggw90kvrug95c.png" alt="ZI open search wiki"></p>
<hr>
<p>This is a RAD (Rapid Application Development) textual user interface library for Zsh. It in many aspects resembles a typical CGI+(D)HTML setup. There are:</p>
<ul>
<li>
<p>Generators ran on the &ldquo;server&rdquo; side (basic Zshell-code that is just generating text!),</p>
</li>
<li>
<p>Event loop that turns the generated text into a document with active elements (buttons, anchors, toggle buttons, text fields, list boxes),</p>
</li>
<li>
<p>Mechanism to regenerate document parts from the original generators.</p>
</li>
</ul>
<hr>
<p>So, a Zshell code generates text. It is then turned into a document with hyperlinks.
DHTML-like calls are possible that will regenerate document parts on the fly.
Page can be also reloaded with input data, just like an HTML page. A voiced video available on <a href="https://drive.google.com/file/d/1mg6OPScurIT_AIJPotEzpw1TrnU0OeUZ/view?usp=sharing">google drive</a>, that shows how to create an application – <strong>Nmap network scanner frontend</strong></p>
<h2 id="screenshots">Screenshots</h2>
<p><a href="https://z.digitalclouds.dev/assets/ideal-img/hello-world-fs8.6811b86.903.png"><img src="https://z.digitalclouds.dev/assets/ideal-img/hello-world-fs8.6811b86.903.png" alt="hello world"></a></p>
<p><strong>Text-fields demo, showing what color &ldquo;default&rdquo; can do:</strong></p>
<p><a href="https://z.digitalclouds.dev/assets/ideal-img/zui-text-fields-fs8.9b6ac89.905.png"><img src="https://z.digitalclouds.dev/assets/ideal-img/zui-text-fields-fs8.9b6ac89.905.png" alt="text fields"></a></p>
<p><strong>List-boxes demo:</strong></p>
<p><a href="https://z.digitalclouds.dev/assets/ideal-img/zui-list-boxes-fs8.a3bc270.903.png"><img src="https://z.digitalclouds.dev/assets/ideal-img/zui-list-boxes-fs8.a3bc270.903.png" alt="list boxes"></a></p>
<p><strong>History demo – fully functional history tool with the incremental search:</strong></p>
<p><a href="https://z.digitalclouds.dev/assets/ideal-img/zui-history-fs8.2162405.902.png"><img src="https://z.digitalclouds.dev/assets/ideal-img/zui-history-fs8.2162405.902.png" alt="history demo"></a></p>
<p><strong>Text Editor demo, written in 30 minutes:</strong></p>
<p><a href="https://z.digitalclouds.dev/assets/ideal-img/zui-edit-fs8.e4d0000.904.png"><img src="https://z.digitalclouds.dev/assets/ideal-img/zui-edit-fs8.e4d0000.904.png" alt="text editor"></a></p>
<h2 id="asciinema">Asciinema</h2>
<p>Videos on the service <code>Asciinema</code>, where you can resize the video like a normal web page, and select/copy text.</p>
<p><strong>List boxes, text fields:</strong></p>
<p><a href="https://asciinema.org/a/107691"><img src="https://asciinema.org/a/107691.png" alt="asciicast"></a></p>
<p><strong>Text editor written in 30 minutes:</strong></p>
<p><a href="https://asciinema.org/a/107800"><img src="https://asciinema.org/a/107800.png" alt="asciicast"></a></p>
<p><strong>Configure/Make wrapper:</strong></p>
<p><a href="https://asciinema.org/a/107688"><img src="https://asciinema.org/a/107688.png" alt="asciicast"></a></p>
<h3 id="learning-zsh">Learning Zsh</h3>
<p>ZUI will allow you to learn Zsh at an advanced level. The library uses Zshell as e.g. Ruby. To write a functional program in Ruby, you need to know the language. To write a command or alias in Zsh, you can spend years not learning anything new. With ZUI you will learn how to use <code>coproc</code>, patterns with <code>(#b)</code> flag, Zstyles, arrays, hashes, and various substitutions. That said, examples are there to make the process easy, and problems have an easy and advanced way of solving.</p>
<h3 id="api">API</h3>
<p>The API consists of <a href="#standard-library">Standard Library</a>, <a href="#utilities-library">Utilities Library</a> and <a href="#callbacks">Callbacks</a>. You normally want a few calls from Standard Library – to create buttons and regenerate document parts, and one or two callbacks. The fastest way to learn ZUI is to look at <a href="https://github.com/z-shell/zui/blob/main/demos/zui-demo-hello-world">Hello World example</a> and other <a href="https://github.com/z-shell/zui/tree/main/demos">example codes</a> like the <a href="https://github.com/z-shell/zui/blob/main/demos/zui-demo-timeout">timeout example</a>.</p>
<h2 id="standard-library">Standard Library</h2>
<p>Standard Library contains functions to:</p>
<ul>
<li>initialize and cleanup an application,</li>
<li>load and set application&rsquo;s configuration,</li>
<li>create hyperlinks (buttons, anchors, text fields, list boxes),</li>
<li>handle hyperlinks (e.g. check if the given text is a hyperlink),</li>
<li>control document regeneration on-the-fly (the DHTML-like way),</li>
<li>handle modules (e.g. read module&rsquo;s position in the document),</li>
</ul>
<h3 id="calls-of-standard-library">Calls of Standard Library</h3>
<p>Below are descriptions of Standard Library functions. Arguments in triangular brackets are mandatory, in square brackets – optional.</p>
<hr>
<h4 id="-zui_std_init">-zui_std_init</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_init <span style="color:#f92672">[</span>app:<span style="color:#e6db74">&#34;application ID&#34;</span><span style="color:#f92672">]</span> <span style="color:#f92672">[</span>app_name:<span style="color:#e6db74">&#34;Application name&#34;</span><span style="color:#f92672">]</span>
</code></pre></div><p>Initializes application. To be called <strong>before emulating</strong>. Optional argument <code>app:...</code> will set <code>ZUI[app]</code> – hash field needed by any application. Argument <code>app_name:</code> does the same for <code>ZUI[app_name]</code> (it is a human-readable application name, displayed in header).</p>
<hr>
<h4 id="-zui_std_init2">-zui_std_init2</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_init2
</code></pre></div><p>Initialization to be called <strong>after emulating</strong>. <code>emulate</code> is the command that makes a function an independent program and each ZUI application should use it.</p>
<hr>
<h4 id="-zui_std_stalog">-zui_std_stalog</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_stalog &lt;Text 1&gt; <span style="color:#f92672">[</span>Text 2<span style="color:#f92672">]</span> ...
</code></pre></div><p>Appends a message to the status window logs. Each text argument has a color assigned – see the <code>log_colors</code> <a href="#Zstyles">Zstyle</a>, it controls the colors.</p>
<hr>
<h4 id="-zui_std_special_text">-zui_std_special_text</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_special_text &lt;text&gt; <span style="color:#f92672">[</span>output array<span style="color:#f92672">]</span>
reply<span style="color:#f92672">+=(</span> <span style="color:#e6db74">&#34;{output string}&#34;</span> <span style="color:#f92672">)</span>
</code></pre></div><p>Quote special characters in the text. This allows to use of strings like <code>That's</code> in the document – special character <code>'</code> will not disturb content. The default output array is <code>reply</code>.</p>
<hr>
<h4 id="-zui_std_button_ext">-zui_std_button_ext</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_button_ext &lt;ID&gt; &lt;data1&gt; &lt;data2&gt; &lt;data3&gt; &lt;data4&gt; &lt;button text&gt; <span style="color:#f92672">[</span>handler<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>output array<span style="color:#f92672">]</span>
</code></pre></div><p>Creates string with the button. Every button has an ID assigned – it is the first argument. Then go four user-data arguments – if the handler will be invoked, the user-data will be passed to it along with the ID. <code>&lt;button text&gt;</code> is the label of the button. <code>[handler]</code> is the function name or inline code to be called at the press of the button. <code>[output array]</code> name can be provided to have the result appended to that array (the default array is <code>reply</code>). If a handler has a substring &ldquo;internal&rdquo; in it (in function name or inline code), then it will be invoked without list restart. Otherwise, a list restart will be performed (this is like invoking JavaScript without web page reload, or doing the reload and calling code on the server-side).</p>
<hr>
<h4 id="-zui_std_rc_button_ext">-zui_std_rc_button_ext</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_rc_button_ext &lt;ID&gt; &lt;data1&gt; &lt;data2&gt; &lt;data3&gt; &lt;data4&gt; &lt;button text&gt; <span style="color:#f92672">[</span>handler<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>output array<span style="color:#f92672">]</span>
</code></pre></div><p>The function works identically to <code>-zui_std_button</code>, but it wraps button text in square brackets – &ldquo;RC&rdquo; is for &ldquo;rectangular&rdquo;. Also, both functions have no-<code>_ext</code> versions that do not have <code>&lt;data1&gt;</code>&hellip;<code>&lt;data4&gt;</code> arguments.</p>
<hr>
<h4 id="-zui_std_anchor">-zui_std_anchor</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_anchor &lt;ID&gt; &lt;index&gt; &lt;data1&gt; &lt;data2&gt; &lt;data3&gt; &lt;button text&gt; <span style="color:#f92672">[</span>handler<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>output array<span style="color:#f92672">]</span>
</code></pre></div><p>Creates an anchor – a hyperlink that moves the cursor to the specified line. Appends it to <code>[output array]</code> (a parameter specified by name) – <code>reply</code> by default. <code>&lt;index&gt;</code> is the line number to jump to. It is relative to the current module. It, in general, cannot point to the absolute line number in the document. To point to line outside the module, use <code>A+B</code> syntax, e.g. <code>1-2</code>, to jump <code>2</code> lines before the first line of the module. Instead of the handler, you may use <code>&lt;data2&gt;</code> and <code>&lt;data3&gt;</code> to pass a module regeneration instruction. For example, pass <code>&quot;,mod2_ice1,&quot;</code> <code>&quot;arg&quot;</code> to regenerate some module numbered 2, instance 1, with passed user-data &ldquo;arg&rdquo;. This regeneration is with list restart (i.e. it is like web page reload with <code>arg</code> passed to script on the server-side). If the handler has a substring &ldquo;internal&rdquo; in it (in function name or inline code), then the anchor will be internal – will not cause the document to reload. Anchor of which <code>&lt;data2&gt;</code> matches <code>,*,</code> is set to be external. Example call:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_anchor regen1 <span style="color:#ae81ff">4</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#e6db74">&#34;,mod1_ice1,&#34;</span> $RANDOM <span style="color:#e6db74">&#34;[</span><span style="color:#e6db74">${</span>ZUI[MAGENTA]<span style="color:#e6db74">}</span><span style="color:#e6db74">Regen</span><span style="color:#e6db74">${</span>ZUI[FMT_END]<span style="color:#e6db74">}</span><span style="color:#e6db74">]&#34;</span>
</code></pre></div><p>This instructs to regenerate module <code>1</code> instance <code>1</code>, with no handler call, with <code>$RANDOM</code> as generator&rsquo;s third input - regeneration user-data. <code>4</code> is the line number on which the cursor will be placed after the regeneration. Note that any generator call has instance ID (mod and ice) in <code>$1</code> and <code>$2</code> by the design of restart-regeneration loop.</p>
<hr>
<h4 id="-zui_std_text_field">-zui_std_text_field</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_text_field &lt;ID&gt; &lt;width param&gt; &lt;index param&gt; &lt;text param&gt; &lt;data1&gt; &lt;data2&gt; &lt;data3&gt; <span style="color:#f92672">[</span>handler<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>output array<span style="color:#f92672">]</span>
</code></pre></div><p>Creates text-field. Every text field has width, given indirectly, by supplying <strong>name of variable</strong> holding the width number. In the same way, a start-index is to be provided – it specifies from which character the text should be displayed (so it can e.g. start from the 5th character). <code>&lt;text param&gt;</code> is the name of the variable holding the string that the text field contains. The handler will be called on the accept event (i.e. Enter-press; Cancel is ESC-press, it restores previous text-field contents).</p>
<hr>
<h4 id="-zui_std_list_box">-zui_std_list_box</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_list_box &lt;ID&gt; &lt;width param&gt; &lt;index param&gt; &lt;options param&gt; &lt;data1&gt; &lt;data2&gt; &lt;data3&gt; <span style="color:#f92672">[</span>handler<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>output array<span style="color:#f92672">]</span>
</code></pre></div><p>Creates list-box. Every list box has a text width that it will occupy in the document regardless of the option&rsquo;s text length. This width is specified via <strong>name of variable</strong> holding the width number. Current-selected option is <code>&lt;index param&gt;</code> – also a variable name. Options are specified by <code>;</code>-separated string, put in a variable whose name is passed as the fourth argument (<code>&lt;options param&gt;</code>). The handler will be called on the accept event (i.e. Enter-press; Cancel is ESC-press, it restores previous list-box current option).</p>
<hr>
<h4 id="-zui_std_get_ganchor">-zui_std_get_ganchor</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_get_ganchor &lt;module index&gt; &lt;instance index&gt; &lt;button text&gt;
</code></pre></div><p>Anchors cannot use global indexes and easily point to other modules. However, there are <code>top anchors</code> that point to each module. The top anchors can be hidden. However, they are always accessible by this function. It fetches anchor pointing to module <code>&lt;module index&gt;</code>, instance <code>&lt;instance index&gt;</code>. The anchor will be having specified <code>&lt;button text&gt;</code>. You can use it as any other anchor, with the notable fact that handler cannot be specified, however, a callback will be called on anchor&rsquo;s press: <code>-zui-standard-global-anchors-callback()</code>, with anchor&rsquo;s ID in <code>$1</code>, line number in <code>$2</code>, module index in <code>$3</code>, instance index in <code>$4</code>.</p>
<hr>
<h4 id="-zui_std_decode_hyperlink">-zui_std_decode_hyperlink</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_decode_hyperlink &lt;hyperlink string&gt; <span style="color:#f92672">[</span>output array<span style="color:#f92672">]</span>
array<span style="color:#f92672">=(</span> ID data1 data2 data3 data4 <span style="color:#f92672">)</span>
</code></pre></div><p>Decodes given hyperlink (anchor, button, raw link). Its ID and user-data are placed in the array given by name (default is <code>reply</code> array). Testable.</p>
<hr>
<h4 id="-zui_std_decode_text_field">-zui_std_decode_text_field</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_decode_text_field &lt;hyperlink string&gt; <span style="color:#f92672">[</span>output array<span style="color:#f92672">]</span>
array<span style="color:#f92672">=(</span> ID width-param index-param text-param data1 data2 data3 <span style="color:#f92672">)</span>
</code></pre></div><p>Decodes given text-field hyperlink. Its ID, names of backend parameters, and user data are placed in the array given by name (default is <code>reply</code> array). Testable.</p>
<hr>
<h4 id="-zui_std_decode_list_box">-zui_std_decode_list_box</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_decode_list_box &lt;hyperlink string&gt; <span style="color:#f92672">[</span>output array<span style="color:#f92672">]</span>
array<span style="color:#f92672">=(</span> ID width-param index-param options-param data1 data2 data3 <span style="color:#f92672">)</span>
</code></pre></div><p>Decodes given list-box hyperlink. Its ID, names of backend parameters, and user data are placed in the array given by name (default is <code>reply</code> array). Testable.</p>
<hr>
<h4 id="-zui_std_decode">-zui_std_decode</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_decode &lt;hyperlink string&gt; <span style="color:#f92672">[</span>output parameter<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>output array<span style="color:#f92672">]</span>
array<span style="color:#f92672">=(</span> <span style="color:#f92672">{</span>data decoded from hyperlink<span style="color:#f92672">}</span> <span style="color:#f92672">)</span>
parameter<span style="color:#f92672">=</span>1|2|<span style="color:#ae81ff">3</span>
</code></pre></div><p>Tries various decoding functions (for regular hyperlinks, text fields, list-boxes). Testable. Returns (in <code>REPLY</code> or specified parameter) 1 if recognized regular hyperlink (anchor, button, raw link), 2 if text field, 3 if list-box. Will return 0 for unrecognized string, however, the function is testable so a normal return value test can be performed.</p>
<hr>
<h4 id="-zui_std_get_stext">-zui_std_get_stext</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_get_stext &lt;special-text string&gt; <span style="color:#f92672">[</span>output parameter<span style="color:#f92672">]</span>
REPLY<span style="color:#f92672">={</span>text<span style="color:#f92672">}</span>
</code></pre></div><p>Output variable (default: <code>REPLY</code>) is set to text contained in the special-text string.</p>
<hr>
<h4 id="-zui_std_is_hyperlink">-zui_std_is_hyperlink</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_is_hyperlink &lt;hyperlink string&gt;
</code></pre></div><p>Checks if a given string is a regular hyperlink (anchor, button, raw link). Testable (true – the string is a correct hyperlink).</p>
<hr>
<h4 id="-zui_std_is_text_field">-zui_std_is_text_field</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_is_text_field &lt;hyperlink string&gt;
</code></pre></div><p>Checks if a given string is a text field. Testable (true – the string is a correct text field).</p>
<hr>
<h4 id="-zui_std_is_list_box">-zui_std_is_list_box</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_is_list_box &lt;hyperlink string&gt;
</code></pre></div><p>Checks if a given string is a list-box. Testable (true – the string is a correct list-box).</p>
<hr>
<h4 id="-zui_std_is_any_hyperlink">-zui_std_is_any_hyperlink</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_is_any_hyperlink &lt;hyperlink string&gt; <span style="color:#f92672">[</span>output parameter<span style="color:#f92672">]</span>
parameter<span style="color:#f92672">=</span>1|2|<span style="color:#ae81ff">3</span>
</code></pre></div><p>Checks if a given string is any possible hyperlink, from anchor to list-box. Output parameter (<code>REPLY</code> by default) will contain 1 if recognized regular hyperlink, 2 if text-field, 3 if list-box. For unrecognized string it will contain 0, however, the function is testable, so a regular return value check can be performed.</p>
<hr>
<h4 id="-zui_std_has_any_hyperlinks">-zui_std_has_any_hyperlinks</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_has_any_hyperlinks &lt;hyperlink string&gt;
</code></pre></div><p>Similar to <code>-zui_std_is_any_hyperlink</code>, but doesn&rsquo;t return the type of the hyperlink recognized. Testable.</p>
<hr>
<h4 id="-zui_std_load_config">-zui_std_load_config</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_load_config &lt;variable&gt; &lt;default&gt; &lt;time limit&gt; &lt;output parameter&gt;
</code></pre></div><p>Loads variable from configuration if it&rsquo;s older than e.g. <code>2</code> seconds (the <code>&lt;time limit&gt;</code> argument). Time limit is used only if <code>&lt;output parameter&gt;</code> points to <code>ZUI</code> hash field, e.g. <code>ZUI[text_mode]</code>. Otherwise, the configuration is always read regardless of the time limit. <code>&lt;variable&gt;</code> should have <code>b:</code> prefix for boolean type, <code>s:</code> for string type (<code>s:</code> is the default). Boolean variables are mapped to just <code>0</code> or <code>1</code>, the same only values are accepted as <code>&lt;default&gt;</code> values for that variable type. Example call:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_load_config s:text_mode <span style="color:#e6db74">&#34;off&#34;</span> <span style="color:#ae81ff">2</span> <span style="color:#e6db74">&#39;ZUI[text_mode]&#39;</span>  <span style="color:#75715e"># No text-segment navigation</span>
</code></pre></div><p>The <strong>Z style</strong> variable is looked up at path <code>:plugin:zui</code>, then at <code>:plugin:zui:app:${ZUI[app]}</code>. The latter path has higher priority.</p>
<hr>
<h4 id="-zui_std_store_default_app_config">-zui_std_store_default_app_config</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_store_default_app_config &lt;variable&gt; &lt;value&gt;
</code></pre></div><p>Stores gave variable to Zstyle <strong>if</strong> the variable is not already set. Can be used to set up the default configuration of the application. The user will be still able to set his configuration, the function will not overwrite it. Example call:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_store_default_app_config b:top_anchors <span style="color:#ae81ff">0</span>  <span style="color:#75715e"># No top-anchors</span>
</code></pre></div><hr>
<h4 id="-zui_std_cleanup">-zui_std_cleanup</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_cleanup <span style="color:#f92672">[</span>serialize|deserialize:<span style="color:#e6db74">&#34;app&#34;</span><span style="color:#f92672">]</span>
</code></pre></div><p>Clears the <code>ZUI</code> hash – all configuration fields, anchors, buttons, etc. Also, clears fields that start with <code>my_</code> – this is the provided namespace to use by applications. If <code>serialize</code> is given, will store <code>my_*</code> fields and <code>zui-list</code> state fields into a special <code>ZUI</code> field. It can be then retrieved by <code>deserialize:&quot;app&quot;</code> – the effect will be like if the application was never left.</p>
<hr>
<h4 id="-zui_std_set_mod_factor">-zui_std_set_mod_factor</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_set_mod_factor &lt;module index&gt; &lt;factor&gt;
</code></pre></div><p>Sets how many instances of a module given by index should be generated (the module-factor).</p>
<hr>
<h4 id="-zui_std_get_mod_factor">-zui_std_get_mod_factor</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_get_mod_factor &lt;module index&gt; <span style="color:#f92672">[</span>output parameter<span style="color:#f92672">]</span>
</code></pre></div><p>Gets several instances of a module given by index. Stores result in <code>REPLY</code>, or in other parameters specified by name.</p>
<hr>
<h4 id="-zui_std_load_global_index_and_size">-zui_std_load_global_index_and_size</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_load_global_index_and_size &lt;module index&gt; &lt;instance index&gt; <span style="color:#f92672">[</span>output param1<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>output param2<span style="color:#f92672">]</span>
</code></pre></div><p>Loads where a module is located (at which line in the document) and what size it has (how many lines it occupies). Stores to <code>REPLY</code> and <code>REPLY2</code> by default, or to specified parameters.</p>
<hr>
<h4 id="-zui_std_reset_replies">-zui_std_reset_replies</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_reset_replies
</code></pre></div><p>Generators use parameters <code>reply</code>, <code>reply2</code>, <code>reply3</code>, <code>reply4</code>. This function clears them.</p>
<hr>
<h4 id="-zui_std_map_replies">-zui_std_map_replies</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_map_replies
</code></pre></div><p>Generator output should be mapped onto parameters:</p>
<pre tabindex="0"><code>mod${midx}_ice${iidx}_output
mod${midx}_ice${iidx}_size
mod${midx}_ice${iidx}_nonselectables
mod${midx}_ice${iidx}_hops
mod${midx}_ice${iidx}_anchors
</code></pre><p>This function does this. It should normally not be needed, <code>-zui_std_fly_mod_regen</code> does this automatically.</p>
<hr>
<h4 id="-zui_std_fly_mod_regen">-zui_std_fly_mod_regen</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_fly_mod_regen &lt;module index&gt; &lt;instance index&gt;
</code></pre></div><p>Schedules on-the-fly document-fragment update. This corresponds to DHTML, to doing <code>document.getElementById('...').innerHtml=...</code>. No list restart is required (no &ldquo;page reload&rdquo;). Arguments <code>&lt;module index&gt;</code> and <code>&lt;instance index&gt;</code> specify which module instance should be regenerated. The generator used to obtain new content is taken from <code>zui-event-loop</code> list (see <code>-zui_std_fly_array_refresh</code>) and depends only on <code>&lt;module index&gt;</code>. In other words, the same generator is used, the one normally assigned to the module instance.</p>
<hr>
<h4 id="-zui_std_fly_mod_regen_ext">-zui_std_fly_mod_regen_ext</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_fly_mod_regen &lt;generator&gt; &lt;module index&gt; &lt;instance index&gt;
</code></pre></div><p>The same as <code>-zui_std_fly_mod_regen</code>, but uses alternate, specified generator-function.</p>
<hr>
<h4 id="-zui_std_fly_array_refresh">-zui_std_fly_array_refresh</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_fly_array_refresh &lt;module index&gt;
</code></pre></div><p>Submits on-the-fly array refresh. The given <code>&lt;module index&gt;</code> should point to an array (&ldquo;a:&rdquo; prefix at <code>zui-event-loop</code>). The array will be read again and pasted into a document replacing previous content. For example, in the history demo there is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">zui-event-loop 1:demo_generator_A a:u-history 1:demo_generator_A
</code></pre></div><p>Second module (and 1st instance) is array <code>history</code> that is made unique (the <code>u-</code> prefix). You can refresh that content (document fragment) via:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_std_fly_array_refresh <span style="color:#ae81ff">2</span>
</code></pre></div><h2 id="utility-library">Utility Library</h2>
<p>Standard Library contains functions to:</p>
<ul>
<li>automate toggle buttons,</li>
<li>strip color codes from text,</li>
<li>etc.</li>
</ul>
<h3 id="calls-of-utilities-library">Calls of Utilities Library</h3>
<p>Below are descriptions of Utilities Library functions. Arguments in triangular brackets are mandatory, in square brackets – optional.</p>
<hr>
<h4 id="-zui_util_map_bools">-zui_util_map_bools</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_util_map_bools &lt;expressions&gt; &lt;parameters&gt; &lt;true string&gt; &lt;false string&gt;
</code></pre></div><p>Maps boolean values of expressions given in <code>$1</code> (string with entries separated by &lsquo;;') to parameters given via names in <code>$2</code> (separated by &lsquo;;'). For true, <code>&lt;true string&gt;</code> is assigned to corresponding parameter, <code>&lt;false string&gt;</code> for false. Example call:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">local color1 color2 color3
-zui_util_map_bools <span style="color:#e6db74">&#34;1;[[ a = b ]];ZUI[text_select]&#34;</span> <span style="color:#e6db74">&#34;color1;color2;color3&#34;</span> $red $white
</code></pre></div><p>Parameter <code>color1</code> will be set to <code>$red</code>, <code>color2</code> to <code>$white</code>, <code>color3</code> will be assigned depending on <code>$ZUI[text_select]</code> value. Use this to automate toggle buttons – highlight the buttons with one of two colors, depending on the state of a backend variable.</p>
<hr>
<h4 id="-zui_util_strip_codes">-zui_util_strip_codes</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_util_strip_codes &lt;text&gt;
</code></pre></div><p>Strips formatting codes from the text in saves the result into parameter <code>REPLY</code>.</p>
<hr>
<h4 id="-zui_util_get_time">-zui_util_get_time</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_util_get_time
REPLY<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;H:M time string&#34;</span>
</code></pre></div><p>Returns time in format <code>%H:%M</code>, via <code>datetime</code> module (fast) or <code>date</code> command as the fallback</p>
<hr>
<h4 id="-zui_util_get_datetime">-zui_util_get_datetime</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_util_get_datetime
REPLY<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Ymd_H.M.S date string&#34;</span>
</code></pre></div><p>Returns date and time. Uses <code>datetime</code> zsh module (fast) or <code>date</code> command as a fallback.</p>
<hr>
<h4 id="-zui_util_get_timestamp">-zui_util_get_timestamp</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_util_get_timestamp
REPLY<span style="color:#f92672">={</span>seconds<span style="color:#f92672">}</span>
</code></pre></div><p>Returns timestamp, via <code>datetime</code> module (fast) or <code>date</code> as a fallback.</p>
<hr>
<h4 id="-zui_util_has_default_color">-zui_util_has_default_color</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_util_has_default_color
</code></pre></div><p>Returns true if the &ldquo;default&rdquo; color can be used with current <code>Zsh</code>/<code>zcurses</code>.</p>
<hr>
<h4 id="-zui_util_resolve_path">-zui_util_resolve_path</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_util_resolve_path &lt;current working directory&gt; &lt;file path&gt;
reply<span style="color:#f92672">[</span>1<span style="color:#f92672">]={</span>dir-name<span style="color:#f92672">}</span>
reply<span style="color:#f92672">[</span>2<span style="color:#f92672">]={</span>base-name<span style="color:#f92672">}</span>
</code></pre></div><p>Resolves absolute path to file from <code>&lt;current working directory&gt;</code> and <code>&lt;file path&gt;</code>. Returns the path as two components, dir-name in <code>reply[1]</code>, base-name in <code>reply[2]</code>.</p>
<hr>
<h4 id="-zui_util_to_cmd_line">-zui_util_to_cmd_line</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_util_to_cmd_line &lt;text&gt;
</code></pre></div><p>Puts given text on the command line - regardless of Zle being active or not</p>
<hr>
<h4 id="-zui_util_circular_next">-zui_util_circular_next</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_util_circular_next &lt;base&gt; &lt;size&gt;
REPLY<span style="color:#f92672">={</span>path<span style="color:#f92672">}</span>
</code></pre></div><p>Returns next file to write to in circular buffer set of file names <code>&lt;base&gt;.1</code> <code>&lt;base&gt;.2</code> &hellip; <code>&lt;base&gt;.&lt;size&gt;</code>. The buffer is ordered according to modification time – the oldest file from the set is the returned one (so after writing the circular buffer updates). Files are located in <code>~/.config/zui/var/circular_buffers</code>.</p>
<hr>
<h4 id="-zui_util_circular_paths">-zui_util_circular_paths</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui_util_circular_paths &lt;base&gt;
reply<span style="color:#f92672">=(</span> <span style="color:#f92672">{</span>path1<span style="color:#f92672">}</span> <span style="color:#f92672">{</span>path2<span style="color:#f92672">}</span> ... <span style="color:#f92672">)</span>
</code></pre></div><p>Returns absolute file paths of the given circular buffer. The paths are ordered from most recent to least recent. No count is obtained, so all files are returned, even actually disabled by any used <code>&lt;size&gt;</code> (with <code>-zui_util_circular_next</code>).</p>
<h3 id="callbacks">Callbacks</h3>
<p>Many situations are solved by callbacks. This eases the API, you don&rsquo;t have to e.g. supply a</p>
<p>function name in a call but instead just define a function. Callback names follow scheme <code>-zui-standard-*-callback</code>. They are automatically cleared at cleanup (i.e. at <code>-zui_std_cleanup</code> call).</p>
<hr>
<h4 id="-zui-standard-timeout-callback">-zui-standard-timeout-callback</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui-standard-timeout-callback
</code></pre></div><p>Called when <code>$ZUI[timeout]</code> milliseconds pass without user input (the timeout defaults to <code>-1</code>, i.e. no timeout defined). No arguments and the return value is not checked. Redraw of the screen might be invoked by setting <code>$ZUI[timeout_update]</code> to <code>1</code>. Regeneration of module can be scheduled by invoking <code>-zui_std_fly_mod_regen</code>, this implies setting <code>$ZUI[timeout_update]</code>. <code>$ZUI[timeout]</code> is a Z style of the same name.</p>
<p><a href="https://github.com/z-shell/zui/blob/main/demos/zui-demo-timeout">zui-demo-timeout</a> covers this callback.</p>
<hr>
<h4 id="-zui-standard-text-select-callback">-zui-standard-text-select-callback</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui-standard-text-select-callback &lt;type&gt; &lt;text&gt;
</code></pre></div><p>Called when a text is selected. This is possible when Z style <code>text_select</code> is <code>1</code>. The Zstyle <code>text_mode</code> can be <code>off</code> – only whole lines can be then selected. <code>&lt;type&gt;</code> is then set to string <code>line</code>. If <code>text_mode</code> is <code>hyp</code>, then text segments at lines with hyperlinks can be selected. When it is <code>nohyp</code> then this applies to lines without hyperlinks. Value <code>all</code> allows the selection of text segments at all lines, with or without hyperlinks. If a text-segment is selected, <code>&lt;type&gt;</code> is set to string <code>segment</code>.</p>
<hr>
<h4 id="-zui-standard-global-anchors-callback">-zui-standard-global-anchors-callback</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui-standard-global-anchors-callback &lt;id&gt; &lt;initial line&gt; &lt;module index&gt; &lt;instance index&gt;
</code></pre></div><p>Invoked when a global-anchor is pressed. Global anchors are typically at the first line of the document, controlled by Zstyle <code>top_anchors</code>. First argument <code>&lt;id&gt;</code> is the ID of the anchor button, in format <code>aglobal_m&lt;module-index&gt;_i&lt;instance-index&gt;</code>. The second argument <code>&lt;initial line&gt;</code> is set to destination line used when creating the anchor – it might have been changed by dynamic updates to document, i.e. module-regeneration that shifts target lines up or down. <code>&lt;module index&gt;</code> and <code>&lt;instance index&gt;</code> specify to which module instance the anchor is jumping to.</p>
<hr>
<h4 id="-zui-standard-status-callback">-zui-standard-status-callback</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">-zui-standard-status-callback <span style="color:#ae81ff">0</span> &lt;selectable&gt; &lt;uniq&gt; &lt;search&gt; &lt;line&gt; &lt;segment&gt;
-zui-standard-status-callback <span style="color:#ae81ff">1</span> &lt;selectable&gt; &lt;uniq&gt; &lt;search&gt; &lt;line&gt; &lt;segment&gt; ...
</code></pre></div><p>Called after each key-press and also when timeout-callback schedules document update – <code>$ZUI[timeout_update]</code> is then <code>1</code>. First argument can be <code>0</code> or <code>1</code> and it is the type of active segment – <code>0</code> is case: no-hyperlink-active. <code>&lt;selectable&gt;</code> <strong>/</strong> <code>&lt;uniq&gt;</code> <strong>/</strong> <code>&lt;search&gt;</code> are <code>0</code> or <code>1</code> and denote if current line is selectable <strong>/</strong> if uniq mode is enabled <strong>/</strong> if there is a search query entered. Arguments <code>&lt;line&gt;</code> and <code>&lt;segment&gt;</code> are current line and segment.</p>
<p>For variant with <code>1</code> in first argument, what follows is current-hyperlink decoded data. For anchors and buttons, it is (follows code to be used to read the input):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">local id<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$7<span style="color:#e6db74">&#34;</span> data1<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$8<span style="color:#e6db74">&#34;</span> data2<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$9<span style="color:#e6db74">&#34;</span> data3<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$10<span style="color:#e6db74">&#34;</span> data4<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$11<span style="color:#e6db74">&#34;</span>
</code></pre></div><p>For text-fields, it is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">local id<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$7<span style="color:#e6db74">&#34;</span> width<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$8<span style="color:#e6db74">&#34;</span> index<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$9<span style="color:#e6db74">&#34;</span> text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$10<span style="color:#e6db74">&#34;</span> data1<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$11<span style="color:#e6db74">&#34;</span> data2<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$12<span style="color:#e6db74">&#34;</span> data3<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$13<span style="color:#e6db74">&#34;</span>
</code></pre></div><p>For list-boxes, it is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">local id<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$7<span style="color:#e6db74">&#34;</span> width<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$8<span style="color:#e6db74">&#34;</span> index<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$9<span style="color:#e6db74">&#34;</span> options_text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$10<span style="color:#e6db74">&#34;</span> data1<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$11<span style="color:#e6db74">&#34;</span> data2<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$12<span style="color:#e6db74">&#34;</span> data3<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$13<span style="color:#e6db74">&#34;</span>
</code></pre></div><p>You can test for <code>tfield</code> in ID of a text-field, and for <code>lbox</code> in ID of a list-box. These strings are prepended to the IDs that you use when creating those hyperlinks. You can then read the whole data as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">local tpe<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> selectable<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$2<span style="color:#e6db74">&#34;</span> uniq<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$3<span style="color:#e6db74">&#34;</span> search<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$4<span style="color:#e6db74">&#34;</span> line<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$5<span style="color:#e6db74">&#34;</span> segment<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$6<span style="color:#e6db74">&#34;</span>
shift <span style="color:#ae81ff">6</span>
<span style="color:#f92672">[[</span> <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">=</span> *<span style="color:#f92672">(</span>tfield|lbox<span style="color:#f92672">)</span>* <span style="color:#f92672">]]</span> <span style="color:#f92672">&amp;&amp;</span> local id<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> width<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$2<span style="color:#e6db74">&#34;</span> index<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$3<span style="color:#e6db74">&#34;</span> text<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$4<span style="color:#e6db74">&#34;</span> data1<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$5<span style="color:#e6db74">&#34;</span> data2<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$6<span style="color:#e6db74">&#34;</span> data3<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$7<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">||</span>
                                local id<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> data1<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$2<span style="color:#e6db74">&#34;</span> data2<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$3<span style="color:#e6db74">&#34;</span> data3<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$4<span style="color:#e6db74">&#34;</span> data4<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$5<span style="color:#e6db74">&#34;</span>
</code></pre></div><p>The main function of the status callback is adding a message to the status window. It should return <code>1</code> and set array <code>reply</code> to add the message. For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">reply<span style="color:#f92672">=(</span> <span style="color:#e6db74">&#34;My &#34;</span> <span style="color:#e6db74">&#34;new &#34;</span> <span style="color:#e6db74">&#34;message&#34;</span> <span style="color:#f92672">)</span>
<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>
</code></pre></div><p>Returning <code>0</code> means not updating the status window, and <code>reply</code> is then ignored.</p>
<h3 id="zstyles">Zstyles</h3>
<p>To change ZUI global default, invoke:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">zstyle <span style="color:#e6db74">&#34;:plugin:zui&#34;</span> colorpair <span style="color:#e6db74">&#34;white/black&#34;</span>
</code></pre></div><p>An application may override such default with its default. To change default per-application, invoke:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">zstyle <span style="color:#e6db74">&#34;:plugin:zui:app:zui-demo-fly&#34;</span> colorpair <span style="color:#e6db74">&#34;250/17&#34;</span>  <span style="color:#75715e"># 256 colors – zsh &gt;= 5.3; &#34;default&#34; color also from this version</span>
</code></pre></div><p>Below is a complete list of available Zstyles with ZUI default values.</p>
<!-- raw HTML omitted -->
<table>
<thead>
<tr>
<th>ZStyle name</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>&ldquo;colorpair</td>
<td>&ldquo;white/black&rdquo;</td>
<td>Default text and background color. For Zsh &gt;= 5.3, color &ldquo;default&rdquo; is available, it might be e.g. transparent (depends on terminal configuration)</td>
</tr>
<tr>
<td>border</td>
<td>&ldquo;no&rdquo;</td>
<td>No border around main window</td>
</tr>
<tr>
<td>border_cp</td>
<td>&ldquo;yellow/black&rdquo;</td>
<td>Border (and header) color</td>
</tr>
<tr>
<td>bold</td>
<td>&ldquo;no&rdquo;</td>
<td>No default bold</td>
</tr>
<tr>
<td>status_colorpair</td>
<td>&ldquo;white/black&rdquo;</td>
<td>The same as &ldquo;colorpair&rdquo;, but for status window</td>
</tr>
<tr>
<td>status_border</td>
<td>&ldquo;no&rdquo;</td>
<td>No border around status window</td>
</tr>
<tr>
<td>status_border_cp</td>
<td>&ldquo;green/black&rdquo;</td>
<td>Border color of status window</td>
</tr>
<tr>
<td>status_bold</td>
<td>&ldquo;no&rdquo;</td>
<td>No default bold in status window</td>
</tr>
<tr>
<td>mark</td>
<td>&ldquo;red reverse lineund&rdquo;</td>
<td>String starting with one or two color names continued with combination of: reverse, underline, blink, bold, lineund, linerev. Last two underline, reverse whole active line. The rest mark active button. Uppercase color names are for background</td>
</tr>
<tr>
<td>altmark</td>
<td>&ldquo;red reverse&rdquo;</td>
<td>As &ldquo;mark&rdquo;, but for terminals without underline support</td>
</tr>
<tr>
<td>mark2</td>
<td>&ldquo;yellow reverse&rdquo;</td>
<td>The same as &ldquo;mark&rdquo;, but for buttons with background color</td>
</tr>
<tr>
<td>altmark2</td>
<td>&ldquo;yellow reverse&rdquo;</td>
<td>The same as &ldquo;altmark&rdquo;, but for &ldquo;mark2&rdquo;, i.e. mark for buttons with background color, on terminals with no underline support</td>
</tr>
<tr>
<td>status_size</td>
<td>4</td>
<td>Height of status window, including border (drawn or not)</td>
</tr>
<tr>
<td>status_pointer</td>
<td>&ldquo;yes&rdquo;</td>
<td>Show line indicating position in document</td>
</tr>
<tr>
<td>log_append</td>
<td>&ldquo;above&rdquo;</td>
<td>Put log messages on top of others. Also available: &ldquo;below&rdquo;</td>
</tr>
<tr>
<td>log_time_format</td>
<td>&ldquo;[%H:%M] &quot;</td>
<td>Display hour:minute time stamp. Set to &quot;&rdquo; to disable time stamp completely</td>
</tr>
<tr>
<td>log_index</td>
<td>&ldquo;yes&rdquo;</td>
<td>Show order number of log messages</td>
</tr>
<tr>
<td>log_size</td>
<td>&ldquo;32&rdquo;</td>
<td>How many log messages to keep in memory</td>
</tr>
<tr>
<td>top_anchors</td>
<td>&ldquo;yes&rdquo;</td>
<td>Show anchors to each module instance at top</td>
</tr>
<tr>
<td>log_colors</td>
<td>&ldquo;white cyan yellow green cyan red magenta yellow blue&rdquo;</td>
<td>The colors used for log messages. First two are for message&rsquo;s index and time stamp</td>
</tr>
<tr>
<td>select_mode</td>
<td>&ldquo;no-restart&rdquo;</td>
<td>What to do on non-hyperlink selection. Such selection will invoke text-select callback with segment or whole line passed as argument. Plus, it will set ZUI[line_selected] or ZUI[pure_text_selected]. If the Zstyle is set to &ldquo;restart&rdquo; then list restart will be performed. If set to &ldquo;quit&rdquo; then event loop will be exited, and REPLY will be set to line or segment.</td>
</tr>
<tr>
<td>text_mode</td>
<td>&ldquo;all&rdquo;</td>
<td>Navigate across each bit of text, not only hyperlinks. &ldquo;hyp&rdquo; – only at lines with hyperlinks, &ldquo;nohyp&rdquo; – only at lines with no hyperlinks, &ldquo;off&rdquo; - text-bit navigation fully turned off</td>
</tr>
<tr>
<td>text_select</td>
<td>&ldquo;yes&rdquo;</td>
<td>Allow selection on non-hyperlinks (full lines when text_mode is &ldquo;off&rdquo; or &ldquo;hyp&rdquo; – meaning text-bit mode fully turned off or enabled only for lines with hyperlinks, leaving text-only lines undivided)</td>
</tr>
<tr>
<td>timeout</td>
<td>&ldquo;-1&rdquo;</td>
<td>No calls to timeout callback. Denotes milliseconds. Minimum value is 200. Time is counted when there is no user input</td>
</tr>
<tr>
<td>palette</td>
<td>&ldquo;black:red:green: yellow:blue:magenta: cyan:white&rdquo;</td>
<td>8-color palette used by ZUI. Default is normal ANSI palette. Can be changed to indexes of 256 colors (zsh &gt;= 5.3)&rdquo;</td>
</tr>
</tbody>
</table>
<!-- raw HTML omitted -->
<p>All Zstyles are available in ZUI repository: <a href="https://github.com/z-shell/zui/blob/main/docs/ZSTYLES.md">Zstyles</a></p>
<h3 id="example---hello-world">Example - Hello World</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># Started from Zle or from the command line</span>

-zui_std_cleanup deserialize:<span style="color:#e6db74">&#34;zui-demo-hello-world&#34;</span>
-zui_std_init app:<span style="color:#e6db74">&#34;zui-demo-hello-world&#34;</span> app_name:<span style="color:#e6db74">&#34;ZUI Hello World&#34;</span>
emulate -LR zsh -o extendedglob -o typesetsilent -o warncreateglobal
-zui_std_init2 <span style="color:#75715e"># after emulate -LR</span>

-zui_std_store_default_app_config b:border <span style="color:#ae81ff">1</span>

demo_generator_A<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
    local mod<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> ice<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$2<span style="color:#e6db74">&#34;</span>
    <span style="color:#75715e"># Content, no hyper-links</span>
    reply<span style="color:#f92672">=(</span> <span style="color:#e6db74">&#34;Hello World from </span><span style="color:#e6db74">${</span>ZUI[YELLOW]<span style="color:#e6db74">}</span><span style="color:#e6db74">ZUI</span><span style="color:#e6db74">${</span>ZUI[FMT_END]<span style="color:#e6db74">}</span><span style="color:#e6db74">! Module </span>$mod<span style="color:#e6db74">, instance </span>$ice<span style="color:#e6db74">.&#34;</span> <span style="color:#f92672">)</span>
    <span style="color:#75715e"># Non-selectable lines   Hops to jump with [ and ]   Local anchors</span>
    reply2<span style="color:#f92672">=(</span> <span style="color:#f92672">)</span>               reply3<span style="color:#f92672">=(</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">)</span>                reply4<span style="color:#f92672">=(</span> <span style="color:#f92672">)</span>
<span style="color:#f92672">}</span>

<span style="color:#75715e">## Start application ##</span>
zui-event-loop 1:demo_generator_A

-zui_std_cleanup serialize
</code></pre></div><p>Other example which uses list-box: <a href="https://github.com/z-shell/zui/blob/main/demos/zui-demo-list-boxes">zui-demo-list-box</a>.</p>
<h3 id="zui-installation">ZUI Installation</h3>
<p><strong>The plugin is &ldquo;standalone&rdquo;</strong>, which means that only sourcing it is needed. So to install, unpack <code>zui</code> somewhere and add</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">source <span style="color:#f92672">{</span>where-zui-is<span style="color:#f92672">}</span>/zui.plugin.zsh
</code></pre></div><p>to <code>zshrc</code>.</p>
<p>If using a plugin manager, then <code>ZI</code> is recommended, but you can use any other too, and also install with <code>Oh My Zsh</code> (by copying a directory to <code>~/.oh-my-zsh/custom/plugins</code>).</p>
<h4 id="zui---zihttpsgithubcomz-shellzi">ZUI - <a href="https://github.com/z-shell/zi">ZI</a></h4>
<p>Add <code>zi load z-shell/zui</code> to your <code>.zshrc</code> file. ZI will handle the rest automatically the next time you start zsh. To update (i.e. to pull from origin) issue <code>zi update z-shell/zui</code>.</p>
]]></content></item></channel></rss>