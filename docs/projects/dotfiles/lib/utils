#!/usr/bin/env bash
  trap on_error SIGKILL SIGTERM

_exists() {
  command -v $1 > /dev/null 2>&1
}

# Normal Colors
Black='\e[0;30m'        # Black
Red='\e[0;31m'          # Red
Green='\e[0;32m'        # Green
Yellow='\e[0;33m'       # Yellow
Blue='\e[0;34m'         # Blue
Purple='\e[0;35m'       # Purple
Cyan='\e[0;36m'         # Cyan
White='\e[0;37m'        # White

# Bold
BBlack='\e[1;30m'       # Black
BRed='\e[1;31m'         # Red
BGreen='\e[1;32m'       # Green
BYellow='\e[1;33m'      # Yellow
BBlue='\e[1;34m'        # Blue
BPurple='\e[1;35m'      # Purple
BCyan='\e[1;36m'        # Cyan
BWhite='\e[1;37m'       # White

NC="\e[m"               # Color Reset

# Logging stuff
function log_warn()    { echo -e "\x1B[31m\x1B[4mWarning\x1B[24m\x1B[39m: $@"; }
function log_error()   { echo -e "\x1B[31m\x1B[4mError\x1B[24m\x1B[39m: $@"; }
function log_ok()      { echo -e "\x1B[32m>>>>> \x1B[39m$@"; }
function log_success() { echo -e "\x1B[32m>>>>> $@\x1B[39m"; }
function log_fail()    { echo -e "\x1B[31m$@\x1B[39m"; }
function log_subhead() { echo -e "\x1B[4m$@\x1B[24m"; }
function log_header()  { echo -e "\x1B[1m$@\x1B[22m"; }
function log_info()    { echo -e "\x1B[33m>>>>> \x1B[39m$@"; }

# http://stackoverflow.com/a/3232082
function confirm() {  
  # call with a prompt string or use a default
  read -r -p "${1:-Continue?} [y/N] " response
  case $response in
    [yY][eE][sS]|[yY]) 
      true
      ;;
    *)
      false
      ;;
  esac
}

function link_file () {
  local src=$1 dst=$2
  local overwrite= backup= skip=
  local action=
  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then
    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then
      local currentSrc="$(readlink $dst)"
      if [ "$currentSrc" == "$src" ]
      then
        log_success "Up to date."
        skip=true;
      else  
        log_info "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi
    fi
    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}
    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      log_info "Removed $dst\n"
      sleep 1
    fi
    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      log_info "Moved $dst to ${dst}.backup\n" 
      sleep 1
    fi
    if [ "$skip" == "true" ]
    then
      log_info "Skipped $src \n"
      sleep 1
    fi
    fi
    if [ "$skip" != "true" ]  # "false" or empty
    then
    ln -s "$1" "$2"
    log_success "Linked $1 to $2"
    sleep 1
    fi
}

function install_dotfiles () { 
  log_info "Installing dotfiles\n"
  sleep 1
  local overwrite_all=false backup_all=false skip_all=false
  for src in $(cd $DOTFILES/shell && find -maxdepth 1 -name ".*" -type f  -printf "%f\n" ); do
    dst="$HOME/$src"
    link_file "$DOTSHELL/$src" "$dst"
    sleep 2
  done
}

function symlink() {
  ln -fs $1 $2
  log_success "Symlinked >> $1 >> $2\n"
  sleep 1
}

function setup_gitconfig () {
  log_info "Setting up  >> .gitconfig.local\n"
  git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi
  log_subhead "What is your github author name?\n"
      read -e git_authorname
      log_subhead "What is your github author email?\n"
      read -e git_authoremail
      sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.local.example > git/gitconfig.local
  log_success "Setup successful\n"
  sleep 1
}

